version: '3.3'

services:
  postgres:
    image: '{{ docker_registry_url }}/postgres:15.1'
    container_name: "postgres"
    volumes:
      - '/data/postgres:/var/lib/postgresql/data'
      - '/data/postgres-init:/docker-entrypoint-initdb.d'
    networks:
      - skynet
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: '{{ postgres_password }}'

  keycloak:
    image: '{{ docker_registry_url }}/keycloak:20.0.1'
    container_name: keycloak
    depends_on:
      - postgres
    volumes:
      - '/data/keycloak/realm-export.json:/opt/keycloak/data/import/main-realm.json'
    networks:
      - skynet
    restart: on-failure
    environment:
      KC_CONTAINER_NAME: 'keycloak'
      KEYCLOAK_ADMIN: '{{ keycloak_username }}'
      KEYCLOAK_ADMIN_PASSWORD: '{{ keycloak_password }}'
      KC_DB_URL: 'jdbc:postgresql://postgres:5432/keycloak'
      KC_DB_USERNAME: '{{ keycloak_username }}'
      KC_DB_PASSWORD: '{{ keycloak_password }}'
      KC_DB: 'postgres'
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=vcc_skynet
        - traefik.protocol=https
        - traefik.http.routers.keycloak_route.rule=Host(`auth.local`)
        - traefik.http.routers.keycloak_route.entrypoints=websecure
        - traefik.http.routers.keycloak_route.service=keycloak_service
        - traefik.http.routers.keycloak_route.tls=true
        - traefik.http.services.keycloak_service.loadbalancer.server.port=8080
        # sticky session
        - traefik.http.services.keycloak_service.loadbalancer.sticky=true
        - traefik.http.services.keycloak_service.loadbalancer.sticky.cookie.name=StickyCookie
    command:
      - start-dev
      - --import-realm

  nextcloud:
    image: '{{ docker_registry_url }}/nextcloud:23.0-apache'
    container_name: nextcloud
    depends_on:
      - postgres
    volumes:
      - '{{ nextcloud_data_dir }}:/var/www/html'
    networks:
      - skynet
    environment:
      POSTGRES_DB: 'nextcloud'
      POSTGRES_USER: '{{ nextcloud_username }}'
      POSTGRES_PASSWORD: '{{ nextcloud_password }}'
      POSTGRES_HOST: 'postgres'
      NEXTCLOUD_ADMIN_USER: '{{ nextcloud_username }}'
      NEXTCLOUD_ADMIN_PASSWORD: '{{ nextcloud_password }}'
      NEXTCLOUD_TRUSTED_DOMAINS: '192.168.50.*'
      KEYCLOAK_USERNAME: '{{ keycloak_username }}' # used for integrator
      KEYCLOAK_PASSWORD: '{{ keycloak_password }}' # used for integrator
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.middlewares.mywebserver-redirect-websecure.redirectscheme.scheme=https
        - traefik.http.routers.mywebserver-web.middlewares=mywebserver-redirect-websecure
        - traefik.http.routers.mywebserver-web.rule=Host(`cloud.local`)
        - traefik.http.routers.mywebserver-web.entrypoints=web
        - traefik.http.routers.mywebserver-websecure.rule=Host(`cloud.local`)
        - traefik.http.routers.mywebserver-websecure.tls.certresolver=mytlschallenge
        - traefik.http.routers.mywebserver-websecure.tls=true
        - traefik.http.routers.mywebserver-websecure.entrypoints=websecure
        # if you have multiple ports exposed on the service, specify port in the websecure service
        - traefik.http.services.mywebserver-websecure.loadbalancer.server.port=80
    user: 'www-data'
    command: sh -c '/var/www/html/nextcloud-integrator.sh && apache2-foreground'

  traefik:
    image: '{{ docker_registry_url }}/traefik:v2.9.6'
    container_name: "traefik"
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - 8080:8080
    volumes:
      - /data/certs:/etc/ssl/traefik
      - /data/traefik:/etc/traefik/dynamic
      - /data/:/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      # enable Web UI
      - --api.insecure=true
      - --api.dashboard=true
      # set provider (Docker Swarm)
      - --providers.docker.network=skynet
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedbydefault=false
      # traefik http entrypoint port
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # redirect
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      # add x-forwaded-for
      - --entrypoints.web.forwardedHeaders.insecure=true
      # manually enable services exposed by traefik
      - --providers.docker.exposedByDefault=false
      # dynamic configuration files folder
      - --providers.file.directory=/etc/traefik/dynamic
      - --log.level=DEBUG
      # log
      - --accesslog=true
      - --accesslog.filePath=/logs/access.log
    networks:
      - skynet
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=vcc_skynet
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-http.rule=Host(`traefik.local`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.rule=Host(`traefik.local`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.routers.traefik-public-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080

networks:
  skynet:
    driver: overlay
# TODO: Set network outside of docker compose and here just set external
