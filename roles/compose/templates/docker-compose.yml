version: '3.3'

services:
  postgres:
    image: '{{ docker_registry_url }}/postgres:15.1'
    volumes:
      - '/data/postgres:/var/lib/postgresql/data'
      - '/data/postgres-init:/docker-entrypoint-initdb.d'
    networks:
      - skynet
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: '{{ postgres_password }}'

  keycloak:
    image: '{{ docker_registry_url }}/keycloak:20.0.1'
    depends_on:
      - postgres
    volumes:
      - '/data/keycloak/realm-export.json:/opt/keycloak/data/import/main-realm.json'
    ports:
      - 9000:8080
    networks:
      - skynet
    restart: on-failure
    environment:
      KC_CONTAINER_NAME: 'keycloak'
      KEYCLOAK_ADMIN: '{{ keycloak_username }}'
      KEYCLOAK_ADMIN_PASSWORD: '{{ keycloak_password }}'
      KC_DB_URL: 'jdbc:postgresql://postgres:5432/keycloak'
      KC_DB_USERNAME: '{{ keycloak_username }}'
      KC_DB_PASSWORD: '{{ keycloak_password }}'
      KC_DB: 'postgres'
      KC_HOSTNAME_STRICT_HTTPS: 'true'
      KC_HOSTNAME: 'auth.local'
      KC_PROXY: 'edge'
      KC_HOSTNAME_ADMIN_URL: 'https://auth.local'
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=skynet
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.routers.keycloak-public-http.rule=Host(`auth.local`)
        - traefik.http.routers.keycloak-public-http.entrypoints=http
        - traefik.http.routers.keycloak-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.keycloak-public-https.rule=Host(`auth.local`)
        - traefik.http.routers.keycloak-public-https.entrypoints=https
        - traefik.http.routers.keycloak-public-https.tls=true
        # Define the port inside of the Docker service to use
        - traefik.http.services.keycloak-public.loadbalancer.server.port=8080
    command:
      - start-dev
      - --import-realm

  nextcloud:
    image: '{{ docker_registry_url }}/nextcloud:23.0-apache'
    entrypoint: sh -c 'apt update && apt install jq grep sudo -y && /var/www/nextcloud-integrator.sh'
    container_name: nextcloud
    depends_on:
      - postgres
    restart: on-failure
    volumes:
      - '{{ nextcloud_data_dir }}:/var/www'
      - '{{ nextcloud_data_dir }}/html:/var/www/html'
    networks:
      - skynet
    extra_hosts:
      - "auth.local:192.168.50.10"
      - "cloud.local:192.168.50.10"
    environment:
      POSTGRES_DB: 'nextcloud'
      POSTGRES_USER: '{{ nextcloud_username }}'
      POSTGRES_PASSWORD: '{{ nextcloud_password }}'
      POSTGRES_HOST: 'postgres'
      NEXTCLOUD_ADMIN_USER: '{{ nextcloud_username }}'
      NEXTCLOUD_ADMIN_PASSWORD: '{{ nextcloud_password }}'
      NEXTCLOUD_TRUSTED_DOMAINS: 'cloud.local'
      KEYCLOAK_USERNAME: '{{ keycloak_username }}' # used for integrator
      KEYCLOAK_PASSWORD: '{{ keycloak_password }}' # used for integrator
      OIDC_CLIENT_ID: 'nextcloud'
      OIDC_PROVIDER_URL: 'http://auth.local/realms/vcc'
      OIDC_LOGOUT_URL: 'http://cloud.local/apps/oidc_login/oidc'
      OIDC_CLIENT_SECRET: 'kJ5unY8uOjgmMn2pFkwGNVB6AVMErWLB'
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=skynet
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.routers.nextcloud-public-http.rule=Host(`cloud.local`)
        - traefik.http.routers.nextcloud-public-http.entrypoints=http
        - traefik.http.routers.nextcloud-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.nextcloud-public-https.rule=Host(`cloud.local`)
        - traefik.http.routers.nextcloud-public-https.entrypoints=https
        - traefik.http.routers.nextcloud-public-https.tls=true
        # Define the port inside of the Docker service to use
        - traefik.http.services.nextcloud-public.loadbalancer.server.port=80

  traefik:
    image: '{{ docker_registry_url }}/traefik:v2.9.6'
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - 8080:8080
    volumes:
      - /data/certs:/etc/ssl/traefik
      - /data/traefik:/etc/traefik/dynamic
      - /data/:/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=skynet
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.routers.traefik-public-http.rule=Host(`traefik.local`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.traefik-public-https.rule=Host(`traefik.local`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api

#### logging and monitoring ####

  fluent-bit:
    image: '{{ docker_registry_url }}/fluent-bit:2.0.6'
    deploy:
      mode: global
    networks:
      - skynet
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /data/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf

  prometheus:
    image: '{{ docker_registry_url }}/prometheus:v2.40.6'
    ports:
      - "9090:9090"
    volumes:
      - /data/prometheus:/etc/prometheus
      - /data/prometheus-data:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - skynet
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  loki:
    image: '{{ docker_registry_url }}/loki:2.7.1'
    ports:
      - 3100:3100
    volumes:
      - /data/loki:/data
    networks:
      - skynet

  grafana:
    image: '{{ docker_registry_url }}/grafana:8.3.2'
    ports:
      - 3000:3000
    volumes:
      - /data/grafana-provisioning:/etc/grafana/provisioning/datasources
      - /data/grafana:/var/lib/grafana
    networks:
      - skynet
    restart: unless-stopped
    user: root
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=skynet
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.routers.grafana-public-http.rule=Host(`mon.local`)
        - traefik.http.routers.grafana-public-http.entrypoints=http
        - traefik.http.routers.grafana-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.grafana-public-https.rule=Host(`mon.local`)
        - traefik.http.routers.grafana-public-https.entrypoints=https
        - traefik.http.routers.grafana-public-https.tls=true
        # Define the port inside of the Docker service to use
        - traefik.http.services.grafana-public.loadbalancer.server.port=80


networks:
  skynet:
    external: true
